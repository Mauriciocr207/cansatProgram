/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 .\resources\stl\cansatCompressed.gltf --transform
*/
import { useGLTF } from "@react-three/drei";
import React, { useEffect, useState, useRef } from 'react'
import { ipcRenderer } from 'electron';
import { useFrame} from '@react-three/fiber'
import { Clock } from "three";


export function Cansat(props) {
  const ref = useRef();
  const [angs, setAngs] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  useEffect(() => {
    ipcRenderer.on("Arduino:data", (event, data) => {
      setAngs({
        ...angs,
        x: data["ang-x"],
        y: data["ang-y"],
        z: data["ang-z"],
      });
    });
  }, []);
  const { nodes, materials } = useGLTF("/cansat.gltf");
  materials.default.wireframe = false;
  // useFrame((state) => {
  //   ref.current.rotation.x += 0.01;
  //   ref.current.rotation.y += 0.01;
    
  // });
  return (
    <group {...props} ref={ref} dispose={null}>
      <mesh geometry={nodes.mesh_0.geometry} material={materials.default} />
    </group>
  );

  


}
useGLTF.preload("/cansat.gltf");
